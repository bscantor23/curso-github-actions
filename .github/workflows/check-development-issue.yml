name: Resumen de cambios en release

on:
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: read

jobs:
  release-summary:
    runs-on: ubuntu-latest
    
    steps:
      - name: Generar resumen de cambios
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const rel = context.payload.release;
            if (!rel) {
              core.setFailed('No release en payload');
              return;
            }
            const { owner, repo } = context.repo;
            const tag = rel.tag_name;

            // Obtener commits
            let commitsResp;
            try {
              commitsResp = await github.rest.repos.listCommits({
                owner,
                repo,
                sha: tag,
                per_page: 50
              });
            } catch (e) {
              core.setFailed('Error listando commits: ' + e.message);
              return;
            }

            const prNumbers = new Set();
            const issueNumbers = new Set();

            for (const commit of commitsResp.data) {
              try {
                const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  owner,
                  repo,
                  commit_sha: commit.sha
                });
                for (const pr of prs.data) {
                  prNumbers.add(pr.number);
                  const refs = (pr.body || '').match(/#(\d+)/g) || [];
                  for (const r of refs) issueNumbers.add(r.slice(1));
                }
              } catch (e) {
                core.warning('PRs commit ' + commit.sha + ' error: ' + e.message);
              }
            }

            if (!prNumbers.size) {
              core.setFailed('No se detectaron Pull Requests asociados a este release.');
              return;
            }

            // Último PR (mayor número)
            const lastPrNumber = [...prNumbers].sort((a,b)=>b-a)[0];
            let prBody = '';
            try {
              const prData = await github.rest.pulls.get({ owner, repo, pull_number: lastPrNumber });
              prBody = (prData.data.body || '').trim();
            } catch (e) {
              core.setFailed('No se pudo obtener el PR #' + lastPrNumber + ': ' + e.message);
              return;
            }

            if (!prBody) {
              core.setFailed(`El último PR (#${lastPrNumber}) no tiene body (mensaje).`);
              return;
            }


            let summary = `## Release ${tag} details\n\n`;
            summary += `### Description:\n`;
            summary += `${prBody}\n\n`;
            summary += `### Pull Request included:\n`;
            summary += prNumbers.size
              ? [...prNumbers].map(n => `- PR #${n}`).join('\n') + '\n'
              : '- (Ninguno)\n';
            summary += `\n### Issues referenced:\n`;
            summary += issueNumbers.size
              ? [...issueNumbers].map(n => `- Issue #${n}`).join('\n') + '\n'
              : '- (Ninguno)\n';
            summary += '\n---\nGenerado automáticamente.\n';

            const newBody = rel.body ? rel.body + '\n\n' + summary : summary;
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: rel.id,
              body: newBody
            });
            core.notice('Resumen agregado al release.');