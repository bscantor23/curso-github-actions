name: Production CI/CD
on:
  pull_request:
    types:
      - closed
    branches:
      - main
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      job:
        description: 'The name of the job run'
        required: true
        default: 'all'

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  create-tag-release:
    if: (startsWith(github.event.pull_request.head.ref, 'feature') || startsWith(github.event.pull_request.head.ref, 'hotfix') || startsWith(github.event.pull_request.head.ref, 'bugfix')) && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: '0'

      - name: Create tag version feature
        if: ${{ startsWith(github.head_ref, 'feature') }}
        id: create_tag_major
        uses: anothrNick/github-tag-action@v1
        env:
          WITH_V: true
          VERBOSE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: feature/*

      - name: Create tag version patch
        if: ${{ startsWith(github.head_ref, 'hotfix') || startsWith(github.head_ref, 'bugfix') }}
        id: create_tag_patch
        uses: anothrNick/github-tag-action@v1
        env:
          WITH_V: true
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: hotfix/*, bugfix/*

      - name: Set PR title as branch name
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;

            // si el título actual es distinto al nombre de la rama, lo actualizamos
            if (context.payload.pull_request.title !== branchName) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                title: branchName
              });
              core.info(`✅ PR title updated to branch name: ${branchName}`);
            } else {
              core.info("ℹ️ PR title already matches branch name, no update needed");
            }

      - name: Build release summary
        id: release_summary
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            //1. Hallar el número del PR
            const prNumber = context.payload.pull_request?.number || Number(process.env.PR_NUMBER);
            if (!prNumber) {
              core.setFailed('No se pudo determinar el número de PR.');
              return;
            }

            //2. Hallar la data del PR
            let prData;
            try {
              const resp = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              prData = resp.data;
            } catch (e) {
              core.setFailed('No se pudo obtener el PR #' + prNumber + ': ' + e.message);
              return;
            }

            //3. Obtener el tag creado en el anterior step
            const tag = '${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}';
            if (!tag) {
              core.setFailed('Tag no disponible aún.');
              return;
            }

            //4. Obtener el mensaje del PR
            const prBody = (prData.body || '').trim();
            if (!prBody) {
              core.setFailed(`El PR #${prData.number} no tiene un mensaje para enlazar en el release (descríbelo).`);
              return;
            }

            //5. Obtener issues (pueden venir de keywords o desde "Link an issue")
            async function findLinkedIssues(owner, repo, pr) {
              const issuesMap = new Map();
              // A. closingIssuesReferences (palabras clave en body/commits)
              const q1 = `query($owner:String!,$repo:String!,$pr:Int!){
                repository(owner:$owner,name:$repo){
                  pullRequest(number:$pr){ closingIssuesReferences(first:20){ nodes { number title } } }
                }
              }`;
              try {
                const r1 = await github.graphql(q1,{owner,repo,pr});
                (r1.repository.pullRequest.closingIssuesReferences.nodes||[])
                  .forEach(i=> issuesMap.set(i.number, i));
              } catch (e) {
                core.warning('Fallo closingIssuesReferences: ' + e.message);
              }
              // B. CONNECTED_EVENT (enlace manual)
              const q2 = `query($owner:String!,$repo:String!,$pr:Int!,$max:Int!){
                repository(owner:$owner,name:$repo){
                  pullRequest(number:$pr){
                    timelineItems(first:$max,itemTypes:[CONNECTED_EVENT]){ nodes { ... on ConnectedEvent { subject { __typename ... on Issue { number title } } } } }
                  }
                }
              }`;
              try {
                const r2 = await github.graphql(q2,{owner,repo,pr,max:30});
                (r2.repository.pullRequest.timelineItems.nodes||[])
                  .map(n=> n.subject)
                  .filter(s=> s && s.__typename==='Issue')
                  .forEach(i=> issuesMap.set(i.number, i));
              } catch (e) {
                core.warning('Fallo CONNECTED_EVENT: ' + e.message);
              }
              return Array.from(issuesMap.values());
            }
            const issues = await findLinkedIssues(context.repo.owner, context.repo.repo, prNumber);
            if (!issues || issues.length === 0) {
              core.setFailed('No se detectaron issues vinculados. Usa keywords (resolves/fixes/closes #N) o "Link an issue".');
              return;
            }
            // Regla de negocio: límite máximo
            const MAX_ISSUES = 1;
            if (issues.length > MAX_ISSUES) {
              core.setFailed(`Demasiados issues detectados (${issues.length}).`);
              return;
            }

            //6. Hallar commits: por defecto intentar todos los commits de la branch (compareCommits) con fallback a commits del PR
            let commits = [];
            try {
              const baseRef = prData.base.sha;
              const headRef = prData.head.sha;
              const compare = await github.rest.repos.compareCommits({ owner, repo, base: baseRef, head: headRef });
              commits = compare.data.commits || [];
            } catch (e) {
              core.warning('Fallo compareCommits, fallback a listCommits del PR: ' + e.message);
              commits = await github.paginate(
                github.rest.pulls.listCommits,
                { owner, repo, pull_number: prData.number, per_page: 100 }
              );
            }
            const commitLines = commits.map(c => {
              const first = c.commit.message.split('\n')[0];
              return `- Commit ${c.sha.slice(0,7)}: ${first}`;
            });

            //7. Armar el resumen
            let summary = `# Release ${tag} 🚀\n\n`;
            summary += `### Author 👤: @${prData.user.login}\n\n`;
            summary += `### Description 💬: \n\n`;
            summary += prBody + '\n\n';
            summary += '---\n';
            summary += `### Pull Request 🔀:\n- PR #${prData.number}: ${prData.title}\n\n`;
            if (issues.length === 1) {
              const only = issues[0];
              summary += `### Issue 🐛:\n- Issue #${only.number}: ${only.title}\n\n`;
            } else {
              summary += `### Issues (${issues.length}) 🐛:\n`;
              summary += issues.map(i=> `- Issue #${i.number}: ${i.title}`).join('\n') + '\n\n';
            }
            summary += `### Commits (${commits.length}) 📦:\n`;
            summary += commitLines.length ? commitLines.join('\n') + '\n\n' : '- (Ninguno)\n\n';
            summary += 'Generado automáticamente 🤖.\n';
            core.setOutput('release_body', summary);

      - name: Create GitHub release
        if: ${{ startsWith(github.head_ref, 'hotfix') || startsWith(github.head_ref, 'feature') || startsWith(github.head_ref, 'bugfix') }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}
          release_name: ${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}
          body: ${{ steps.release_summary.outputs.release_body }}
          draft: true
          prerelease: false