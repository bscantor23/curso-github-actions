name: Production CI/CD
on:
  pull_request:
    types:
      - closed
    branches:
      - main
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      job:
        description: 'The name of the job run'
        required: true
        default: 'all'

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  create-tag-release:
    if: (startsWith(github.event.pull_request.head.ref, 'feature') || startsWith(github.event.pull_request.head.ref, 'hotfix') || startsWith(github.event.pull_request.head.ref, 'bugfix')) && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: '0'

      - name: Create tag version feature
        if: ${{ startsWith(github.head_ref, 'feature') }}
        id: create_tag_major
        uses: anothrNick/github-tag-action@v1
        env:
          WITH_V: true
          VERBOSE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: feature/*

      - name: Create tag version patch
        if: ${{ startsWith(github.head_ref, 'hotfix') || startsWith(github.head_ref, 'bugfix') }}
        id: create_tag_patch
        uses: anothrNick/github-tag-action@v1
        env:
          WITH_V: true
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: hotfix/*, bugfix/*

      - name: Set PR title as branch name
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;

            // si el título actual es distinto al nombre de la rama, lo actualizamos
            if (context.payload.pull_request.title !== branchName) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                title: branchName
              });
              core.info(`✅ PR title updated to branch name: ${branchName}`);
            } else {
              core.info("ℹ️ PR title already matches branch name, no update needed");
            }

      - name: Build release summary
        id: release_summary
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            //1. Hallar el número del PR
            const prNumber = context.payload.pull_request?.number || Number(process.env.PR_NUMBER);
            if (!prNumber) {
              core.setFailed('No se pudo determinar el número de PR.');
              return;
            }

            //2. Hallar la data del PR
            let prData;
            try {
              const resp = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              prData = resp.data;
            } catch (e) {
              core.setFailed('No se pudo obtener el PR #' + prNumber + ': ' + e.message);
              return;
            }

            //3. Obtener el tag creado en el anterior step
            const tag = process.env.NEW_TAG || '${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}';
            if (!tag) {
              core.setFailed('Tag no disponible aún.');
              return;
            }

            //4. Obtener el mensaje de PR
            const prBody = (prData.body || '').trim();
            if (!prBody) {
              core.setFailed(`El PR #${prData.number} no tiene body (descríbelo).`);
              return;
            }

            //5. Obtener el development (issue) 
            const query = `
              query($owner: String!, $repo: String!, $pr: Int!, $max: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $pr) {
                    timelineItems(first: $max, itemTypes: [CONNECTED_EVENT]) {
                      nodes {
                        ... on ConnectedEvent {
                          subject {
                            __typename
                            ... on Issue {
                              number
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const result = await github.graphql(query, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pr: prNumber,
              max: 10,
            });
            const issues = result.repository.pullRequest.timelineItems.nodes
              .map(node => node.subject)
              .filter(subject => subject.__typename === "Issue");

            if (!issues || issues.length === 0) {
              core.setFailed('No hay issue en Development (usa "Link an issue").');
              return;
            }
            if (issues.length > 1) {
              core.setFailed('Hay demasiados issues enlazados en el PR.');
              return;
            }
            const issue = issues[0];

            //6. Hallar los commits del PR
            const commits = await github.paginate(
              github.rest.pulls.listCommits,
              { owner, repo, pull_number: prData.number, per_page: 100 }
            );
            const commitLines = commits.map(c => {
              const first = c.commit.message.split('\n')[0];
              return `- Commit ${c.sha.slice(0,7)}: ${first}`;
            });

            // Summary
            let summary = `# Release ${tag} 🚀\n\n`;
            summary += `### Author 👤: @${prData.user.login}\n\n`;
            summary += `### Description 💬: \n\n`;
            summary += prBody + '\n\n';
            summary += '---\n';
            summary += `### Pull Request 🔀:\n- PR #${prData.number}: ${prData.title}\n\n`;
            summary += `### Issue 🐛:\n- Issue #${issue.number}: ${issue.title}\n\n`;
            summary += `### Commits (${commits.length}) 📦:\n`;
            summary += commitLines.length ? commitLines.join('\n') + '\n\n' : '- (Ninguno)\n\n';
            summary += 'Generado automáticamente 🤖.\n';
            core.setOutput('release_body', summary);

      - name: Create GitHub release
        if: ${{ startsWith(github.head_ref, 'hotfix') || startsWith(github.head_ref, 'feature') || startsWith(github.head_ref, 'bugfix') }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}
          release_name: ${{ steps.create_tag_patch.outputs.new_tag || steps.create_tag_major.outputs.new_tag }}
          body: ${{ steps.release_summary.outputs.release_body }}
          draft: true
          prerelease: false